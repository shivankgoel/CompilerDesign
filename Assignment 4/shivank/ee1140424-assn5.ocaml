(*REPRESENTATIONAL INVARIANT
 ->the stack is represented by list [a1;a2;a3;...;an]
 ->the element entered in the ith step while constructing this stack is a(n-i+1)
 -> top of the stack is a1 which is accessible before any other element and ai is accessible after a1,a2,a3..,a(i-1) are accessed and removed 

*) 
type 'a stack = 'a list ;;
module type STACK=
sig

val create: unit -> 'a stack
val push: 'a ->'a stack -> 'a stack
val isEmpty:  'a stack -> bool
val size:  'a stack -> int
val top:  'a stack -> 'a
val pop:  'a stack -> 'a stack
end;;



module Stack : STACK =  
struct

(*DESCRIPTION:
Creates an empty stack
FUNCTIONALITY:
val create: unit -> 'a stack
TIME: O(constant)
SPACE: O(constant)
*)
let create (():unit) = [];;





(*DESCRIPTION:
puts the element in the top position of stack which is the element we can access
FUNCTIONALITY:
val push: 'a -> 'a stack -> 'a stack
TIME: O(constant)
SPACE: O(constant)
*)
let rec push (x) (stck) = x::stck;;





(*DESCRIPTION:
checks if the stack is empty 
FUNCTIONALITY:
val isEmpty: 'a stack -> bool
TIME: O(constant)
SPACE: O(constant)
*)
let rec isEmpty (x) = (x=[]);;


(*DESCRIPTION:
tells the size of the stack  
FUNCTIONALITY:
val size: 'a stack -> int
TIME: O(n)
SPACE: O(n) n 1s are stored
*)
let rec size (x ) = List.length x;;



(*DESCRIPTION:
gives the last entered element of the stack  
FUNCTIONALITY:
val top: 'a stack -> 'a
TIME: O(constant)
SPACE: O(constant)
*)
let rec top  (x) = if (x=[])  then raise (Failure "No head found ") else List.hd x;;


(*DESCRIPTION:
removes the element which was entered last into the stack and give the rest of stack as answer 
FUNCTIONALITY:
val pop: 'a stack -> 'a stack
TIME: O(constant)
SPACE: O(constant)
*)
let rec pop (x)= if (size x) = 0 then raise (Failure "No tail found") else List.tl x;;



end;;

type move = FromTo of int*int;;
open List;;
open Stack;;


(*DESCRIPTION:
in an integer list it tells the top most element if it is there else if no element then it retuns 0 
FUNCTIONALITY:
val top1: int stack->int  
TIME: O(constant)
SPACE: O(constant)
*)
let rec top1 x = if (x=[]) then 0 else List.hd x;;




(*DESCRIPTION:
given an integer and list , it tells that if that element was to be placed in the list how many elements would be above it  
FUNCTIONALITY:
val sranker: int stack-> int -> int   
TIME: O(n) in worst case 
SPACE: O(n) in worst case 
*)
let rec sranker x y = match x with t::ts-> if t<=y then (1+(sranker ts y)) else 0 |[]->0;;



(*DESCRIPTION:
returns the last element of a list if list is empty then 0
FUNCTIONALITY:
val last1: int list-> int   
TIME: O(n)  
SPACE: O(n*n)
*)

let rec last1 m = match m with []->0|[x]->x|x::xs->last1 xs;;

(*DESCRIPTION:
returns the last element of a list if list is empty then 0
FUNCTIONALITY:
val last: 'a list-> 'a   
TIME: O(n)  
SPACE: O(n*n)
*)
let rec last m = match m with []->raise (Failure "last")|[x]->x|x::xs->last xs;;

(*DESCRIPTION:
takes three lists in ('a list * 'b list * 'c list) and append them to back of respective lists in every element of ('d * 'a list * 'b list * 'c list) list  
FUNCTIONALITY:
val appender :
  'a list * 'b list * 'c list ->
  ('d * 'a list * 'b list * 'c list) list ->
  ('d * 'a list * 'b list * 'c list) list 
  
TIME: O(sum of lengths of all lists in the input )  
SPACE: O(sum of squares of lengths of all lists in the input )
*)
let rec appender x list = match (list,x) with ([],_)-> [] 
                          |( (con,t1,t2,t3)::lis , (m,n,o) )->(con,(t1@m),(t2@n),(t3@o))::(appender x lis);;

(*functions defined in class*)
let rec take list n = match list with []-> if n=0 then [] else raise (Failure "take")|x::xs ->if (n=0) then [] else x::(take xs (n-1));;

(*functions defined in class*)
let rec drop list n = match list with []-> if n=0 then [] else raise (Failure "drop")|x::xs ->if (n=0) then list else (drop xs (n-1));;   




(*DESCRIPTION:
solves the hanoi by listing the moves
FUNCTIONALITY:hanoit->  int * int * int * int * int stack list ->  (move * int stack * int stack * int stack) list 

TIME: O(2^n - 1)  for regular hanoi 
SPACE: O((2^n-1)*n) for regular hanoi 
*)
let rec hanoit (m(*no of elements*),i(*from1*),j(*to3*),k(*via2*),[s1;s2;s3]) =
let (a1,a3,a2)=((nth [s1;s2;s3] (i-1)),(nth [s1;s2;s3] (j-1)),(nth [s1;s2;s3] (k-1)))
    in  
           if (m <= 0) then []
           else let g = (nth a1 (m-1)) in
               if (((sranker a1 g)!=(length a1))||((sranker a2 g)!=(length a2))||((sranker a3 g)!=(length a3))) then 
           appender ((drop s1 (sranker s1 g)),(drop s2 (sranker s2 g)),(drop s3 (sranker s3 g))) (hanoit (m,i,j,k,[(take s1 (sranker s1 g)); (take s2 (sranker s2 g)); (take s3 (sranker s3 g))]))
        else 
            if (m=1) then                     
                            if (isEmpty a3) then
                                          if ((i,j,k) = (1,3,2)) then ((FromTo (i,j)),(pop s1),(s2),(push (top s1) s3))::[]
                                     else if ((i,j,k) = (2,3,1)) then ((FromTo (i,j)),(s1),(pop s2),(push (top s2) s3))::[]
                                     else if ((i,j,k) = (2,1,3)) then ((FromTo (i,j)),(push (top s2) s1),(pop s2),(s3))::[]
                                     else if ((i,j,k) = (3,1,2)) then ((FromTo (i,j)),(push (top s3) s1),(s2),(pop s3))::[]
                                     else if ((i,j,k) = (1,2,3)) then ((FromTo (i,j)),(pop s1),(push (top s1) s2),(s3))::[]
                                     else if ((i,j,k) = (3,2,1)) then ((FromTo (i,j)),(s1),(push (top s3) s2),(pop s3))::[]
                                     else raise (Failure "why_you_do_this")
                              else if ((top a1)<(top a3)) then
                                          if ((i,j,k) = (1,3,2)) then ((FromTo (i,j)),(pop s1),(s2),(push (top s1) s3))::[]
                                     else if ((i,j,k) = (2,3,1)) then ((FromTo (i,j)),(s1),(pop s2),(push (top s2) s3))::[]
                                     else if ((i,j,k) = (2,1,3)) then ((FromTo (i,j)),(push (top s2) s1),(pop s2),(s3))::[]
                                     else if ((i,j,k) = (3,1,2)) then ((FromTo (i,j)),(push (top s3) s1),(s2),(pop s3))::[]
                                     else if ((i,j,k) = (1,2,3)) then ((FromTo (i,j)),(pop s1),(push (top s1) s2),(s3))::[]
                                     else if ((i,j,k) = (3,2,1)) then ((FromTo (i,j)),(s1),(push (top s3) s2),(pop s3))::[]
                                     else raise (Failure "why_you_do_this")
                              else if ( (sranker a1 (top1 a2))!=0) then let a = hanoit ((sranker a3 (top1 a1)),j,k,i,[s1;s2;s3]) in 
                                  match (last a) with (FromTo (x,y),t1,t2,t3)->  
                                    let b = hanoit (1,i,j,k,[t1;t2;t3]) in 
                                        match (last b) with (FromTo (x,y),t4,t5,t6)-> a@b@(hanoit ((sranker a3 (top1 a1)),k,j,i,[s1;s2;s3]))
                                       
                                     else let a = hanoit ((sranker a3 (top1 a1)),j,i,k,[s1;s2;s3]) in
                                     match (last a) with ((FromTo (blah1,blah2)),t1,t2,t3)->
                                         a@(hanoit ((sranker a3 (top1 a1))+m,i,j,k,[t1;t2;t3]))
   (*CASE|||||||||||regular hanoi in a1 elements are less than a2 and a3 *)                          
        else if (((sranker a3 (nth a1 (m-1)))=0)&&((sranker a2 (nth a1 (m-1)))=0)) then let a = hanoit((m-1),i,k,j,[s1;s2;s3]) in 
                  match (last a) with (FromTo(v1,v2),t1,t2,t3)-> 
                      let b = hanoit (1,i,j,k,[t1;t2;t3]) in 
                             match (last (a@b)) with (FromTo(v3,v4),t4,t5,t6)-> let c=hanoit((m-1),k,j,i,[t4;t5;t6]) in a@(b@c) 
   (*CASE||||||||||||a2 doesnt affect and a1 in a3 *)        
      else if ( ((sranker a2 (nth a1 (m-1)))=0) && ((sranker a3 (top1 a1))=(sranker a3 (nth a1 (m-1)) ))&&(a3!=[])) then 
                   let a = hanoit ((sranker a3 (top1 a1)),j,i,k,[s1;s2;s3]) in 
                         match (last a) with (FromTo (v1,v2),t1,t2,t3)->  
                                 let b = hanoit (((sranker a3 (top1 a1))+m),i,j,k,[t1;t2;t3]) in a@b 
   (*CASE||||||||||||a3 doesnt affect a1 a2 mein ghussa hai*)
       else if ( ((sranker a3 (nth a1 (m-1)))=0) && ((sranker a2 (top1 a1))=(sranker a2 (nth a1 (m-1)) ))&&(a2!=[])) then 
              let a = hanoit (  (sranker a2 (top1 a1)) , k , i , j,[s1;s2;s3]) in 
                    match (last a) with (FromTo (v1,v2),t1,t2,t3)->
                        let b=hanoit (  (m+(sranker a2 (top1 a1))) , i , j , k ,[t1;t2;t3] ) in 
                           match (last (a@b)) with (FromTo(v3,v4),t4,t5,t6) ->let c =hanoit (  (sranker a2 (top1 a1)) , j , k , i ,[t4;t5;t6]) in a@b@c
             else if  (((sranker a3 (top1 a2))=(sranker a3 (last1 a2))) && ((sranker a2 (top1 a1))=(sranker a2 (nth a1 (m-1))))&&(a2!=[])&&(a3!=[])) then 
            let a = hanoit ((sranker a3 (top1 a2)),j,k,i,[s1;s2;s3]) in 
               match (last a) with (FromTo(x,y),t1,t2,t3)->
                   let b= hanoit ( ((sranker a3 (top1 a2)) + (sranker a2 (top1 a1))),k,i,j,[t1;t2;t3]) in 
                      match (last (a@b)) with (FromTo(x,y),t4,t5,t6)->
                             let c = hanoit (((sranker a3 (top1 a2))+(sranker a2 (top1 a1))+m),i,j,k,[t4;t5;t6]) in 
                                  match (last (a@(b@c))) with (FromTo (x,y),t7,t8,t9)-> 
                                      let d = hanoit ( ((sranker a3 (top1 a2)) + (sranker a2 (top1 a1))),j,k,i,[t7;t8;t9]) in 
                                        match (last d) with (FromTo(x,y),t10,t11,t12)->
                                            let e = hanoit ( ((sranker a3 (top1 a2))),k,j,i,[t10;t11;t12]) in a@(b@(c@(d@e)))


        (*CASE||||||||||a1 in a3 and  a3 in a2 *) 
             else if  (((sranker a2 (top1 a3))=(sranker a2 (last1 a3))) && ((sranker a3 (top1 a1))=(sranker a3 (nth a1 (m-1))))) then 
            let a = hanoit ((sranker a2 (top1 a3)),k,j,i,[s1;s2;s3]) in 
               if (a!=[]) then match (last a) with (FromTo(x,y),t1,t2,t3)->
                   let b= hanoit ( ((sranker a2 (top1 a3)) + (sranker a3 (top1 a1))),j,i,k,[t1;t2;t3]) in 
                      match (last (a@b)) with (FromTo(x,y),t4,t5,t6)->
                             let c = hanoit (((sranker a2 (top1 a3))+(sranker a3 (top1 a1))+m),i,j,k,[t4;t5;t6]) in 
                                  match (last (a@(b@c))) with (FromTo (x,y),t7,t8,t9)-> 
                                      let d = hanoit ((sranker a2 (top1 a3)),j,k,i,[t7;t8;t9]) in a@(b@(c@d))
               else let b= hanoit ( ((sranker a2 (top1 a3)) + (sranker a3 (top1 a1))),j,i,k,[s1;s2;s3]) in 
                     if (b!=[]) then match (last (a@b)) with (FromTo(x,y),t4,t5,t6)->
                             let c = hanoit (((sranker a2 (top1 a3))+(sranker a3 (top1 a1))+m),i,j,k,[t4;t5;t6]) in 
                                  match (last (a@(b@c))) with (FromTo (x,y),t7,t8,t9)-> 
                                      let d = hanoit ((sranker a2 (top1 a3)),j,k,i,[t7;t8;t9]) in a@(b@(c@d))
                     else    let c = hanoit (((sranker a2 (top1 a3))+(sranker a3 (top1 a1))+m),i,j,k,[s1;s2;s3]) in 
                                  match (last (a@(b@c))) with (FromTo (x,y),t7,t8,t9)-> 
                                      let d = hanoit ((sranker a2 (top1 a3)),j,k,i,[t7;t8;t9]) in a@(b@(c@d))

             else if  (((sranker a3 (top1 a2))=(sranker a3 (last1 a2))) && ((sranker a2 (top1 a1))=(sranker a2 (nth a1 (m-1))))) then 
            let a = hanoit ((sranker a3 (top1 a2)),j,k,i,[s1;s2;s3]) in 
               match (last a) with (FromTo(x,y),t1,t2,t3)->
                   let b= hanoit ( ((sranker a3 (top1 a2)) + (sranker a2 (top1 a1))),k,i,j,[t1;t2;t3]) in a@b
                     (* match (last (a@b)) with (FromTo(x,y),t4,t5,t6)->
                             let c = hanoit (((sranker a3 (top1 a2))+(sranker a2 (top1 a1))+m),i,j,k,[t4;t5;t6]) in 
                                  match (last (a@(b@c))) with (FromTo (x,y),t7,t8,t9)-> 
                                      let d = hanoit ( ((sranker a3 (top1 a2)) + (sranker a2 (top1 a1))),j,k,i,[t7;t8;t9]) in 
                                        match (last d) with (FromTo(x,y),t10,t11,t12)->
                                            let e = hanoit ( ((sranker a3 (top1 a2))),k,j,i,[t10;t11;t12]) in a@(b@(c@(d@e)))*)
 

      (*CASE|||||||||||rest other cases which are uncovered*)
      else  let d = hanoit (1,i,j,k,[s1;s2;s3]) in 
               match (last d) with ((FromTo (blah5,blah6)),t7,t8,t9)->d@(hanoit ((m-1),i,j,k,[t7;t8;t9]))        



;;

(*same as previous*)
let hanoi (m,i,j,k,s1,s2,s3)=hanoit(m,i,j,k,[s1;s2;s3]);;

(*DESCRIPTION:
takes one four member tuple and then compares the last three members with last three elements of (four member tuple) list and if same then removes all elements till then 
FUNCTIONALITY:delmem ->('a * 'b * 'c * 'd) * ('a * 'b * 'c * 'd) list * ('a * 'b * 'c * 'd) list ->
  ('a * 'b * 'c * 'd) list = <fun>

  
TIME: O(length of "list")  

*)
let rec delmem (the,list,store) = match (the,list) with (_,[])->the::store
  |( (_,t1,t2,t3) , (_,t4,t5,t6)::lis ) ->if (t1,t2,t3) = (t4,t5,t6) then delmem (the,lis,[]) else delmem (the,lis,store@[(List.hd list)]);;

(*DESCRIPTION:
when the same configuration of hanoi arises again it removes the useless steps
FUNCTIONALITY:('a * 'b * 'c * 'd) list ->
  ('a * 'b * 'c * 'd) list 

  
TIME: O((length of "list")^2)  

*)

let rec conciser x = match x with []->[]|t::ts-> let l = delmem (t,ts,[]) in t::(conciser (List.tl l))
  ;;
(*gives the concise output with extra elements removed*)
let hanoi (m,i,j,k,s1,s2,s3) = let a = hanoi (m,i,j,k,s1,s2,s3) in tl (conciser ( (FromTo(1,2),s1,s2,s3)::a));;










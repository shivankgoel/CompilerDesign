type 'a stack = 'a list;;
module type STACK=sig
val create: unit -> 'a stack
val push: 'a -> 'a stack -> 'a stack
val isEmpty: 'a stack -> bool
val size: 'a stack -> int
val top: 'a stack -> 'a
val pop: 'a stack -> 'a stack
end;;





module Stack : STACK =
struct
let create ():'a stack = [];;
let rec push (x:'a) (stck :'a stack) : 'a stack = x::stck;;
let rec isEmpty (x:'a stack) = (x=[]);;
let rec size (x :'a list) = List.length x;;
let rec top  (x :'a stack) = if (x=[])  then raise (Failure "No head found ") else List.hd x;;
let rec pop (x:'a stack):'a stack = if (size x) = 0 then raise (Failure "No tail found") else List.tl x;;
end;;

open List;;

open Stack;;
(* the type maths comprises of the numbers and different operators*)
type maths = Num of float | Add of int | Mult of int | Neg | Oneby | Sqrt
| Max of int| Min of int   
| Sin | Cos | Tan | Abs
| Asin | Acos | Atan 
| Exp | Log;;

open List;;

let max x1 x2 = if x1>=x2 then x1 else x2;;

let min x2 x1 = if x1>=x2 then x2 else x1;;


(*the type tree has many braches possible since addition at a step can have multiple steps*)
type 'a tree = Tip | Node of 'a * ('a tree list);;

let rec foldrt f e x = match x with [] -> e | y::ys->f y (foldrt f e ys);;
let append x y = x@y;;




(*Descr : To calculate the postorder of an expression tree
   Func : val postorder : maths tree -> maths tree = <fun>
   Time : for a binary tree of height n, T(n) = 2 T(n-1) + 3*( (2^(n-1)) - 1 )   
   Space : number of elements in the tree*)
let rec postorder tree = match tree with Tip->[]| Node (father,child) -> (foldrt append [] (map postorder child))@[father];;

(*Descr : To calculate the value from the postorder of an expression tree
   Func : val solver : maths list * float stack -> float = <fun>
  (Note :::: for add n,mult n,max n,min n consider the length to be n-1)
   Time : Length of the post variable  
   Space : length of (post + stck)*)
let rec solver (post,stck) = match post with []->(match stck with [x]->x

                                                                  |_->raise (Failure "Wrong_input_to_solver")) 

                                     | (Num  x) ::xs -> solver (xs,(push x stck)) 

                                     | (Add x) ::xs -> if (x=2) then solver (xs,  push ((top stck) +. (top (pop stck))) (pop (pop stck))   ) 

                                                          else solver (((Add (x-1))::((Num (top (stck)))::((Add 2)::xs))),(pop stck))

                                     | (Mult x) ::xs -> if (x=2) then solver (xs,  push ((top stck) *. (top (pop stck))) (pop (pop stck))   ) 

                                                          else solver (((Mult (x-1))::((Num (top (stck)))::((Mult 2)::xs))),(pop stck))

                                     | (Max  x) :: xs -> if (x=2) then solver (xs,  push (max (top stck) (top (pop stck))) (pop (pop stck))   ) 

                                                           else solver (((Max (x-1))::((Num (top (stck)))::((Max 2)::xs))),(pop stck))

                                     | (Min  x) :: xs -> if (x=2) then solver (xs,  push (min (top stck) (top (pop stck))) (pop (pop stck))   ) 

                                                           else solver (((Min (x-1))::((Num (top (stck)))::((Min 2)::xs))),(pop stck))

                                     | (Neg)::xs -> solver (xs,(((-1.)*.(top stck))::(pop stck)))

                                     | (Oneby)::xs -> solver (xs,(((1.)/.(top stck))::(pop stck)))

                                     | (Sqrt)::xs -> solver (xs,((sqrt (top stck))::(pop stck)))

                                     | (Sin)::xs -> solver (xs,((sin (top stck))::(pop stck)))

                                     | (Cos)::xs -> solver (xs,((cos (top stck))::(pop stck)))

                                     | (Tan)::xs -> solver (xs,((tan (top stck))::(pop stck)))

                                     | (Asin)::xs -> solver (xs,((asin (top stck))::(pop stck)))

                                     | (Acos)::xs -> solver (xs,((acos (top stck))::(pop stck)))

                                     | (Atan)::xs -> solver (xs,((atan (top stck))::(pop stck)))

                                     | (Exp)::xs -> solver (xs,((exp (top stck))::(pop stck)))

                                     | (Log)::xs -> solver (xs,((log (top stck))::(pop stck)))

                                     | (Abs)::xs -> solver (xs,((abs_float (top stck))::(pop stck)));;
(*Descr :Combination of two previous functions first calls postorder and then does evaluation with the help of it
  Func : val evaluate : maths tree -> float = <fun>
  Time : sum of previous two
  Space : "  "     "      "*)
let rec evaluate (x) = solver (postorder x,[]);;
(*1st in assignment*)  
let a1 = Node (Add 2,[Node (Num 2.0,[]);Node (Mult 3,[Node (Sin,[Node (Num 1.0,[])]);Node (Exp,[Node (Num (-7.1),[])]);Node (Oneby,[Node (Num 3.6,[])])])]) 


(* 2nd in assignment *) let a2 = Node (Tan,[Node (Abs,[Node (Add 2,[Node (Mult 2,[Node (Num 31.6,[]);Node (Cos,[Node (Num 3.14,[])])]);Node (Sqrt,[Node (Mult 2,[Node (Num 2.9,[]);Node (Sqrt,[Node (Mult 2,[Node (Num 2.1,[]);Node (Oneby,[Node (Num 3.0,[])])])])])])])])]);;




(* 3rd in assignment *) let a3 = Node (Add 4,[Node (Num 0.5,[]);Node (Num (-2.3),[]);Node (Num 3.0,[]);Node(Mult 2,[Node (Num 9.1,[]);Node (Log,[Node(Add 2,[Node (Num 13.0,[]);Node (Mult 3,[Node (Num 12.9,[]);Node (Sqrt,[Node (Num 6.25,[])]);Node (Oneby,[Node (Abs,[Node (Add 2,[Node (Num 2.3,[]);Node (Num (-4.3),[])])])])])])])])]);;



(*4th in assignment *) let a4 = Node (Sqrt,[Node (Add 2,[Node (Num 2.0,[]);Node (Sqrt,[Node (Add 2,[Node (Num 2.0,[]);Node (Sqrt,[Node (Mult 2,[Node (Num 2.0,[]);Node (Sqrt,[Node (Add 2,[Node(Num 2.0,[]);Node(Sqrt,[Node (Add 2,[Node (Num 2.0,[]);Node (Num 2.0,[])])])])])])])])])])]);;


(*5th in assignment*) let a5 = Node (Add 2,[Node (Num 34.1,[]);Node (Neg,[Node (Mult 2,[Node (Log,[Node(Abs,[Node (Add 2,[Node (Mult 2,[Node (Num 3.4,[]);Node (Num 6.8,[])]);Node (Neg,[Node (Exp,[Node (Num 11.5,[])])])])])]);Node (Sin,[Node (Mult 2,[Node (Num 1.07,[]);Node (Sqrt,[Node (Num 4.0,[])])])])])])]);;


                                             




